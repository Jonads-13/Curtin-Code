/* Generated By:JavaCC: Do not edit this line. Parser.java */
package edu.curtin.saed_assignment2;
public class Parser implements ParserConstants {
    static int rows;
    static int columns;
    static int[] start;
    static int[] goal;

// Overall parsing
  static final public void dsl() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIZE:
      case START:
      case GOAL:
      case ITEM:
      case OBSTACLE:
      case PLUGIN:
      case SCRIPT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      FileContent();
    }
  }

  static final public void FileContent() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIZE:
      Size();
      break;
    case START:
      Start();
      break;
    case GOAL:
      Goal();
      break;
    case ITEM:
      ItemDefinition();
      break;
    case OBSTACLE:
      ObstacleDefinition();
      break;
    case PLUGIN:
      PluginDefinition();
      break;
    case SCRIPT:
      ScriptDefinition();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Size() throws ParseException {
    jj_consume_token(SIZE);
    Coordinate();
        String sizeCoordinate = token.image;
        String[] split = sizeCoordinate.replaceAll("[()]","").split(",");
        rows = Integer.parseInt(split[0].trim());
        columns = Integer.parseInt(split[1].trim());
  }

  static final public void Start() throws ParseException {
    jj_consume_token(START);
    Coordinate();
        String startCoordinate = token.image;
        String[] split = startCoordinate.replaceAll("[()]","").split(",");
        start = new int[]{Integer.parseInt(split[0]), Integer.parseInt(split[1])};
  }

  static final public void Goal() throws ParseException {
    jj_consume_token(GOAL);
    Coordinate();
        String goalCoordinate = token.image;
        String[] split = goalCoordinate.replaceAll("[()]","").split(",");
        start = new int[]{Integer.parseInt(split[0]), Integer.parseInt(split[1])};
  }

  static final public void ItemDefinition() throws ParseException {
    jj_consume_token(ITEM);
    jj_consume_token(STRING_LITERAL);
    jj_consume_token(22);
    AtLocation();
    Message();
    jj_consume_token(23);
        System.out.println("Item definition: " + token.image);
  }

  static final public void ObstacleDefinition() throws ParseException {
    jj_consume_token(OBSTACLE);
    jj_consume_token(22);
    AtLocation();
    RequirementList();
    jj_consume_token(23);
        System.out.println("Obstacle definition: " + token.image);
  }

  static final public void PluginDefinition() throws ParseException {
    jj_consume_token(PLUGIN);
    jj_consume_token(PLUGIN_NAME);
        System.out.println("Plugin definition: " + token.image);
  }

  static final public void ScriptDefinition() throws ParseException {
    jj_consume_token(SCRIPT);
    jj_consume_token(SCRIPT_BODY);
        System.out.println("Script definition: " + token.image);
  }

  static final public void RequirementList() throws ParseException {
    jj_consume_token(REQUIRES);
    jj_consume_token(STRING_LITERAL);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(24);
      jj_consume_token(STRING_LITERAL);
    }
        System.out.println("Reqiurement list: " + token.image);
  }

  static final public void AtLocation() throws ParseException {
    jj_consume_token(AT);
    CoordinateList();
        System.out.println("At Location: " + token.image);
  }

  static final public void CoordinateList() throws ParseException {
    Coordinate();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(24);
      Coordinate();
    }
        System.out.println("Coordinate List: " + token.image);
  }

  static final public void Message() throws ParseException {
    jj_consume_token(MESSAGE);
    jj_consume_token(STRING_LITERAL);
        System.out.println("Message: " + token.image);
  }

  static final public void Coordinate() throws ParseException {
    jj_consume_token(COORDINATE);
        System.out.println("Coordinate: " + token.image);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfe0,0xfe0,0x1000000,0x1000000,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
