/* Generated By:JavaCC: Do not edit this line. Parser.java */
package edu.curtin.saed_assignment2;

import java.util.*;
import edu.curtin.saed_assignment2.api.model.*;
import edu.curtin.saed_assignment2.game.model.GameData;

public class Parser implements ParserConstants {
    public GameData parse(GameData data) throws ParseException {
        data = dsl(data);
        return data;
    }

// Start parsing given file
  static final public GameData dsl(GameData data) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SIZE:
      case START:
      case GOAL:
      case ITEM:
      case OBSTACLE:
      case PLUGIN:
      case SCRIPT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      data = FileContent(data);
    }
        {if (true) return data;}
    throw new Error("Missing return statement in function");
  }

// Different possible formats
  static final public GameData FileContent(GameData data) throws ParseException {
    int[] values = null;
    Player player = null;
    Goal goal = null;
    List<Item> tempItems = new LinkedList<Item>();
    List<Obstacle> tempObstacles = new LinkedList<Obstacle>();
    String tempPlugin = null;
    String tempScript = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIZE:
      values = Size();
      break;
    case START:
      player = Start();
      break;
    case GOAL:
      goal = Goal();
      break;
    case ITEM:
      tempItems = ItemDefinition();
      break;
    case OBSTACLE:
      tempObstacles = ObstacleDefinition();
      break;
    case PLUGIN:
      tempPlugin = PluginDefinition();
      break;
    case SCRIPT:
      tempScript = ScriptDefinition();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if(values != null) {
            data.setMap(new Cell[values[0]][values[1]]);
        }
        if(player != null) {
            data.setPlayer(player);
            data.addSpecialCell(player);
        }
        if(goal != null) {
            data.setGoal(goal);
            data.addSpecialCell(goal);
        }
        if(tempPlugin != null) {
            data.addPlugin(tempPlugin);
        }
        for(Item item : tempItems) {
            data.addItem(item);
            data.addSpecialCell(item);
        }
        for(Obstacle obstacle : tempObstacles) {
            data.addObstacle(obstacle);
            data.addSpecialCell(obstacle);
        }
        {if (true) return data;}
    throw new Error("Missing return statement in function");
  }

// Extract the map dimensions
  static final public int[] Size() throws ParseException {
    int[] values;
    jj_consume_token(SIZE);
    values = Coordinate();
        {if (true) return values;}
    throw new Error("Missing return statement in function");
  }

// Get the player start location
  static final public Player Start() throws ParseException {
    int[] start;
    jj_consume_token(START);
    start = Coordinate();
        {if (true) return new Player(start[0], start[1]);}
    throw new Error("Missing return statement in function");
  }

// Get the Goal location
  static final public Goal Goal() throws ParseException {
    int[] gLocation;
    jj_consume_token(GOAL);
    gLocation = Coordinate();
        {if (true) return new Goal(gLocation[0], gLocation[1]);}
    throw new Error("Missing return statement in function");
  }

// Parse item information
  static final public List<Item> ItemDefinition() throws ParseException {
    String itemName, itemMessage;
    Set<int[]> locations;
    List<Item> items = new LinkedList<Item>();
    jj_consume_token(ITEM);
    itemName = jj_consume_token(STRING_LITERAL).image;
    jj_consume_token(22);
    locations = AtLocation();
    itemMessage = Message();
    jj_consume_token(23);
        for(int[] coord : locations) {
            items.add(new Item(coord[0], coord[1], itemName, itemMessage));
        }
        {if (true) return items;}
    throw new Error("Missing return statement in function");
  }

// parse obstacle information
  static final public List<Obstacle> ObstacleDefinition() throws ParseException {
    Set<int[]> locations;
    List<String> requirements;
    List<Obstacle> obstacles = new LinkedList<Obstacle>();
    jj_consume_token(OBSTACLE);
    jj_consume_token(22);
    locations = AtLocation();
    requirements = RequirementList();
    jj_consume_token(23);
        for(int[] coord : locations) {
            obstacles.add(new Obstacle(coord[0], coord[1], requirements));
        }
        {if (true) return obstacles;}
    throw new Error("Missing return statement in function");
  }

// Parse plugin references
  static final public String PluginDefinition() throws ParseException {
    String pluginName;
    jj_consume_token(PLUGIN);
    pluginName = jj_consume_token(PLUGIN_NAME).image;
        {if (true) return pluginName;}
    throw new Error("Missing return statement in function");
  }

// Parse script definitions
  static final public String ScriptDefinition() throws ParseException {
    String script;
    jj_consume_token(SCRIPT);
    script = jj_consume_token(SCRIPT_BODY).image;
        {if (true) return script;}
    throw new Error("Missing return statement in function");
  }

// Build list of items reqiured to pass an obstacle
  static final public List<String> RequirementList() throws ParseException {
    List<String> requirements = new LinkedList<String>();
    String requirement;
    jj_consume_token(REQUIRES);
    requirement = jj_consume_token(STRING_LITERAL).image;
        requirements.add(requirement);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(24);
      requirement = jj_consume_token(STRING_LITERAL).image;
    }
        requirements.add(requirement);
        {if (true) return requirements;}
    throw new Error("Missing return statement in function");
  }

// get list of locations an item, element is
  static final public Set<int[]> AtLocation() throws ParseException {
    Set<int[]> locations;
    jj_consume_token(AT);
    locations = CoordinateSet();
        {if (true) return locations;}
    throw new Error("Missing return statement in function");
  }

// Build set of coordinates
  static final public Set<int[]> CoordinateSet() throws ParseException {
    // Use a set to prevent duplicate coordinates
    Set<int[]> set = new HashSet<int[]>();
    int[] coordinate;
    coordinate = Coordinate();
     set.add(coordinate);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 24:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(24);
      coordinate = Coordinate();
    }
        set.add(coordinate);
        {if (true) return set;}
    throw new Error("Missing return statement in function");
  }

// Get string associated with message tag
  static final public String Message() throws ParseException {
    String message;
    jj_consume_token(MESSAGE);
    message = jj_consume_token(STRING_LITERAL).image;
        {if (true) return message.replaceAll("\u005c"", "");}
    throw new Error("Missing return statement in function");
  }

// Location definition
  static final public int[] Coordinate() throws ParseException {
    int row, col;
    jj_consume_token(COORDINATE);
        // Get each number
        String[] split = token.image.replaceAll("[()]","").split(",");

        // parse tokens by removing any whitespace
        row = Integer.parseInt(split[0].strip());
        col = Integer.parseInt(split[1].strip());

        {if (true) return new int[]{row, col};} // return useful data

    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfe0,0xfe0,0x1000000,0x1000000,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
