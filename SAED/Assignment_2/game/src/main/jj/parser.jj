PARSER_BEGIN(Parser)
package edu.curtin.saed_assignment2;

import java.util.*;
import edu.curtin.saed_assignment2.api.model.*;
import edu.curtin.saed_assignment2.game.model.GameData;

public class Parser 
{
    public GameData parse(GameData data) throws ParseException {
        data = dsl(data);
        return data;
    }
}
PARSER_END(Parser)

SKIP : { " " | "\n" | "\r" | "\t" }

TOKEN : {
    < SIZE: "size" > |
    < START: "start" > |
    < GOAL: "goal" > |
    < ITEM: "item" > |
    < OBSTACLE: "obstacle" > |
    < PLUGIN: "plugin" > |
    < SCRIPT: "script" > |
    < AT: "at" > |
    < REQUIRES: "requires" > |
    < COORDINATE: "(" (<WS>)* (<INT>)+ (<WS>)* "," (<WS>)* (<INT>)+ (<WS>)* ")" > |
    < MESSAGE: "message" > |
    < SCRIPT_BODY: "!{" (~["}"])* "}" > |
    < PLUGIN_NAME: <IDENTIFIER> ( "." <IDENTIFIER> )* > |
    < WS: [" ","\t","\r","\n"] > | // Whitespace
    < STRING_LITERAL: "\"" (~["\""])* "\"" > |
    < IDENTIFIER: ["_", "a"-"z", "A"-"Z"] (["_", "a"-"z", "A"-"Z", "0"-"9"])* > |
    < INT: ("-")? (["0"-"9"])+ >
}

// Start parsing given file
GameData dsl(GameData data) :
{}
{
    ( data=FileContent(data) )* {
        return data;
    }
}

// Different possible formats
GameData FileContent(GameData data) :
{
    int[] values = null;
    Player player = null;
    Goal goal = null;
    List<Item> tempItems = new LinkedList<Item>();
    List<Obstacle> tempObstacles = new LinkedList<Obstacle>();
    String tempPlugin = null;
    String tempScript = null;
}
{
    ( values=Size() | player=Start() | goal=Goal() | tempItems=ItemDefinition() | 
    tempObstacles=ObstacleDefinition() | tempPlugin=PluginDefinition() | tempScript=ScriptDefinition() ) {
        if(values != null) {
            data.setMap(new Cell[values[0]][values[1]]);
        }
        if(player != null) {
            data.setPlayer(player);
            data.addSpecialCell(player);
        }
        if(goal != null) {
            data.setGoal(goal);
            data.addSpecialCell(goal);
        }
        if(tempPlugin != null) {
            data.addPlugin(tempPlugin);
        }
        for(Item item : tempItems) {
            data.addItem(item);
            data.addSpecialCell(item);
        }
        for(Obstacle obstacle : tempObstacles) {
            data.addObstacle(obstacle);
            data.addSpecialCell(obstacle);
        }
    } {
        return data;
    }
}

// Extract the map dimensions
int[] Size() :
{
    int[] values;
}
{
    <SIZE> values=Coordinate() {
        return values;
    }
}

// Get the player start location
Player Start() :
{
    int[] start;
}
{
    <START> start=Coordinate() {
        return new Player(start[0], start[1]);
    }
}

// Get the Goal location
Goal Goal() :
{
    int[] gLocation;
}
{
    <GOAL> gLocation=Coordinate() {
        return new Goal(gLocation[0], gLocation[1]);
    }
}

// Parse item information
List<Item> ItemDefinition() :
{
    String itemName, itemMessage;
    Set<int[]> locations;
    List<Item> items = new LinkedList<Item>();
}
{
    <ITEM> itemName=stringLiteral() "{" locations=AtLocation() itemMessage=Message() "}" {
        for(int[] coord : locations) {
            // strip quotes off of string
            items.add(new Item(coord[0], coord[1], itemName, itemMessage));
        }
        return items;
    }
}

// parse obstacle information
List<Obstacle> ObstacleDefinition() :
{
    Set<int[]> locations;
    List<String> requirements;
    List<Obstacle> obstacles = new LinkedList<Obstacle>();
}
{
    <OBSTACLE> "{" locations=AtLocation() requirements=RequirementList() "}" {
        for(int[] coord : locations) {
            obstacles.add(new Obstacle(coord[0], coord[1], requirements));
        }
        return obstacles;
    }
}

// Parse plugin references
String PluginDefinition() :
{
    String pluginName;
}
{
    <PLUGIN> pluginName=<PLUGIN_NAME>.image {
        return pluginName;
    }
}

// Parse script definitions
String ScriptDefinition() :
{
    String script;
}
{
    <SCRIPT> script=<SCRIPT_BODY>.image {
        return script;
    }
}

// Build list of items reqiured to pass an obstacle
List<String> RequirementList() :
{
    List<String> requirements = new LinkedList<String>();
    String requirement;
}
{
    <REQUIRES> requirement=stringLiteral() {
        requirements.add(requirement);
    } ( "," requirement=stringLiteral() )* {
        requirements.add(requirement); // strip quotes off of string
    } {
        return requirements;
    }
}

// get list of locations an item, element is
Set<int[]> AtLocation() :
{
    Set<int[]> locations;
}
{
    <AT> locations=CoordinateSet() {
        return locations;
    }
}

// Build set of coordinates
Set<int[]> CoordinateSet() :
{
    // Use a set to prevent duplicate coordinates
    Set<int[]> set = new HashSet<int[]>();
    int[] coordinate; // temp storage
}
{
    coordinate=Coordinate() {
     set.add(coordinate);
    } ( "," coordinate=Coordinate() )* {
        set.add(coordinate);
    } {
        return set;
    }
}

// Get string associated with message tag
String Message() :
{
    String message;
}
{
    <MESSAGE> message=stringLiteral() {
        return message.replaceAll("\"", "");
    }
}

// Location definition
int[] Coordinate() :
{
    int row, col;
}
{
    <COORDINATE> {
        // Get each number
        String[] split = token.image.replaceAll("[()]","").split(",");

        // parse tokens by removing any whitespace
        row = Integer.parseInt(split[0].strip()); 
        col = Integer.parseInt(split[1].strip());

        return new int[]{row, col}; // return useful data
    }
}

String stringLiteral() : 
{
    String str;
}
{
    str = <STRING_LITERAL>.image {
        return str.replaceAll("\"", "");
    }
}
